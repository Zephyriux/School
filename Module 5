// Martijn Zwaan
// Module 5
// 24/9/2017

void setup() {
  size(800, 550);
  noStroke();
}

void tekenBMI() {
  line(0, (height - 18.5 * 5), width, (height - 18.5 * 5));
  line(0, (height - 25 * 5), width, (height - 25 * 5));
  line(0, (height - 30 * 5), width, (height - 30 * 5));
}

void tekenTekstLengteGewicht() {
  float balkBreedte = width - margeBreedte * 2;
  fill(#FFFFFF);
  textSize(25);
  text("Lengte: " + leesLengte(balkBreedte) + "cm", margeBreedte, margeHoogte * 2.5);
  text("Gewicht: " + leesGewicht(balkBreedte) + "kg", margeBreedte, margeHoogte * 4.5);
}

void tekenBMItekst() {
  text("Normaal gewicht", tekstMarge, (height - 18.5 * 5) - 5 );
  text("Overgewicht", tekstMarge, (height - 25 * 5) - 5 );
  text("Obees", tekstMarge, (height - 30 * 5) - 5 );
  text("Ondergewicht", tekstMarge, (height - 18.5 * 5) + 10 );
}

int lengte;
int gewicht;
int muisPositieLengte;
int muisPositieGewicht;
int tekstMarge = 20;
int balkKleur = #FFFFFF;
int sliderKleur = #0000FF;
int margeBreedte = 10;
int margeHoogte = 40;
int aantalPosities = 200;
boolean muisBewogen = false;

void draw() {
  float balkHoogte = height / 15;
  float balkBreedte = width - margeBreedte * 2;
  int bmiBoxX = width /3;
  background(#000000);
  float BMI = leesGewicht(balkBreedte) / (leesLengte(balkBreedte) * leesLengte(balkBreedte));
  println("lengte: " + leesLengte(balkBreedte));
  println("gewicht: " + leesGewicht(balkBreedte));
  fill(#F71616);
  rect(bmiBoxX, height, bmiBoxX, 50000 * - BMI);
  stroke(#FFFFFF);
  tekenBMI();
  fill(#FFFFFF);
  textSize(12);
  tekenBMItekst();
  tekenSliders(margeBreedte, margeHoogte, balkBreedte, balkHoogte, aantalPosities);
  berekenMuisPositieLengte();
  tekenTekstLengteGewicht();
  berekenMuisPositieGewicht();
}

int berekenMuisPositieLengte() {
  float balkHoogte = height/15; 
  if (mouseY > margeHoogte && mouseY < margeHoogte + balkHoogte && muisBewogen) {
    int balkBreedte = width - margeBreedte * 2;
    muisPositieLengte = floor(mouseX - margeBreedte);
    if (mouseX < margeBreedte) {
      muisPositieLengte = 0;
    } else if (mouseX > balkBreedte) {
      muisPositieLengte = balkBreedte;
    }
    return muisPositieLengte;
  } else {
    return muisPositieLengte;
  }
}

int berekenMuisPositieGewicht() {
  float balkHoogte = height/15; 
  if (mouseY > margeHoogte * 3 && mouseY < margeHoogte * 3 + balkHoogte && muisBewogen) {
    int balkBreedte = width - margeBreedte * 2;
    muisPositieGewicht = floor(mouseX - margeBreedte);
    if (mouseX < margeBreedte) {
      muisPositieGewicht = 0;
    } else if (mouseX > balkBreedte) {
      muisPositieGewicht = balkBreedte;
    }
    return muisPositieLengte;
  } else {
    return muisPositieLengte;
  }
}

void tekenSliders(int margeBreedte, int margeHoogte, float balkBreedte, float balkHoogte, int aantalPosities) {
  float sliderBreedte = balkBreedte / aantalPosities;
  fill(balkKleur);
  //Lengte
  rect(margeBreedte, margeHoogte, balkBreedte, balkHoogte);
  //Gewicht
  rect(margeBreedte, margeHoogte * 3, balkBreedte, balkHoogte);
  fill(sliderKleur);
  //Lengte
  rect(margeBreedte + muisPositieLengte, margeHoogte, sliderBreedte, balkHoogte);
  //Gewicht
  rect(margeBreedte + muisPositieGewicht, margeHoogte * 3, sliderBreedte, balkHoogte);
}

void mousePressed() {  
  muisBewogen = true;
}

void mouseReleased() {
  if(muisBewogen) {
  muisBewogen = false;
  }
}
